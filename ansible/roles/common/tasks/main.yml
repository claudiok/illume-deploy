- name: configure /etc/hosts
  copy:
    src: ../files/hosts
    dest: /etc/hosts
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
    force: yes
    backup: yes
  become: true

- name: install ssh client config
  copy:
    src: ../files/ssh.cfg
    dest: "/home/{{ ansible_user }}/.ssh/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0600
    force: yes
    backup: yes

- name: Disallow root SSH access
  lineinfile:
    dest=/etc/ssh/sshd_config
    regexp="^PermitRootLogin"
    line="PermitRootLogin no"
    state=present
  become: true
  notify:
    - restart sshd

- name: Disallow SSH password authentication
  lineinfile:
    dest=/etc/ssh/sshd_config
    regexp="^PasswordAuthentication"
    line="PasswordAuthentication no"
    state=present
  become: true
  notify:
    - restart sshd

- name: Disallow SSH challenge response authentication
  lineinfile:
    dest=/etc/ssh/sshd_config
    regexp="^ChallengeResponseAuthentication"
    line="ChallengeResponseAuthentication no"
    state=present
  become: true
  notify:
    - restart sshd

- name: Disallow SSH GSS API authentication
  lineinfile:
    dest=/etc/ssh/sshd_config
    regexp="^GSSAPIAuthentication"
    line="GSSAPIAuthentication no"
    state=present
  become: true
  notify:
    - restart sshd

- name: Make sure locale en_US.UTF-8 is in locale.conf
  lineinfile:
    dest=/etc/locale.gen
    regexp="^en_US.UTF-8"
    line="en_US.UTF-8"
    state=present
  become: true

- name: Blacklist the nouveau kernel module
  kernel_blacklist:
    name: nouveau
    blacklist_file: /etc/modprobe.d/blacklist-nouveau.conf
    state: present
  become: true
  notify:
    - rebuild initrd
    - reboot host and wait

- name: upgrade kernel
  apt:
    name: linux-generic-hwe-16.04
    install_recommends: yes
    update_cache: yes
  become: true

- name: check if we should reboot the system
  stat:
    path: /var/run/reboot-required
    get_md5: no
  register: rebootfile
  become: true

- name: trigger reboot if previous check succeeded
  command: /bin/true
  when: rebootfile.stat.exists == true
  notify:
    - reboot host and wait

- meta: flush_handlers

- name: make sure the nouveau kernel module is *not* loaded
  modprobe:
    name: nouveau
    state: absent
  become: true

- name: upgrade all packages using apt
  apt:
    upgrade: dist
    update_cache: yes
  become: true

- name: install nfs-common and ceph-common
  apt:
    name: nfs-common,ceph-common
  become: true

- name: Make rpc-statd.service start with multi-user.target
  shell: systemctl add-wants multi-user.target rpc-statd.service
  register: rpcstatd_install
  changed_when: "'Created symlink' in rpcstatd_install.stdout + rpcstatd_install.stderr"
  become: true

- name: enable and start rpc-statd.service
  systemd:
    name: rpc-statd.service
    state: started
    enabled: yes
  become: true

- name: install basic docker dependencies
  apt:
    name: apt-transport-https,ca-certificates,curl,software-properties-common
  become: true

- name: add the docker repository apt key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  become: true

- name: add the docker repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
    state: present
  become: true

- name: install docker
  apt:
    name: docker-ce=17.03.2~ce-0~ubuntu-xenial
    update_cache: yes
    force: yes
  become: true

- name: hold docker-ce package at installed version
  dpkg_selections:
    name: docker-ce
    selection: hold
  become: true

- name: make sure the remote ("ubuntu") user is a member of the docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  become: true
  notify:
    - reboot host and wait

- name: download and install kubectl
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.9.3/bin/linux/amd64/kubectl
    checksum: sha256:81eb30e62a12d6e0527a6a3c2a9501b56d65777bf66684739b16a0afe826c8f8
    dest: /usr/local/bin/kubectl
    mode: 0555
  become: true

- name: check if we should reboot the system
  stat:
    path: /var/run/reboot-required
    get_md5: no
  register: rebootfile
  become: true

- name: trigger reboot if previous check succeeded
  command: /bin/true
  when: rebootfile.stat.exists == true
  notify:
    - reboot host and wait

- meta: flush_handlers
